Checks: >
  *,
  -altera-id-dependent-backward-branch,
  -altera-struct-pack-align,
  -altera-unroll-loops,
  -fuchsia-*,
  -llvmlibc-*,
  -llvm-header-guard,
  -llvm-include-order,
  -cppcoreguidelines-owning-memory,
  -cppcoreguidelines-non-private-member-variables-in-classes,
  -cppcoreguidelines-avoid-non-const-global-variables,
  -cppcoreguidelines-avoid-magic-numbers,
  -google-readability-todo,
  -modernize-use-trailing-return-type,
  -modernize-pass-by-value,
  -misc-non-private-member-variables-in-classes,
  -performance-avoid-endl,

# Checks: >
#   *,
#   -cppcoreguidelines-owning-memory
#   -google-readability-todo,
#   -altera-unroll-loops,
#   -altera-id-dependent-backward-branch,
#   -altera-struct-pack-align,
#   -fuchsia-*,
#   fuchsia-multiple-inheritance,
#   -llvm-header-guard,
#   -llvm-include-order,
#   -llvmlibc-*,
#   -modernize-use-trailing-return-type,
#   -misc-non-private-member-variables-in-classes,
#   -cppcoreguidelines-pro-type-vararg,
#   -cppcoreguidelines-avoid-c-arrays,
#   -hicpp-vararg,
#   -hicpp-avoid-c-arrays,
#   -modernize-avoid-c-arrays

WarningsAsErrors: ""
# WarningsAsErrors: "*,-readability-convert-member-functions-to-static"

CheckOptions:
  - key: "readability-identifier-length.MinimumVariableNameLength"
    value: "2"
  - key: "readability-identifier-length.MinimumParameterNameLength"
    value: "2"
  - key: "readability-identifier-length.MinimumLoopCounterNameLength"
    value: "2"
  - { key: readability-identifier-naming.NamespaceCase, value: lower_case }
  - {
      key: readability-identifier-naming.MacroDefinitionCase,
      value: UPPER_CASE,
    }
  - { key: readability-identifier-naming.ClassCase, value: CamelCase }
  - { key: readability-identifier-naming.StructCase, value: CamelCase }
  - { key: readability-identifier-naming.EnumCase, value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantCase, value: CamelCase }
  - { key: readability-identifier-naming.TypedefCase, value: CamelCase }
  - { key: readability-identifier-naming.TypeAliasCase, value: CamelCase }
  - { key: readability-identifier-naming.UnionCase, value: CamelCase }

  - { key: readability-identifier-naming.FunctionCase, value: lower_case }
  - { key: readability-identifier-naming.GlobalFunctionCase, value: lower_case }

  - { key: readability-identifier-naming.GlobalVariableCase, value: CamelCase }

  - { key: readability-identifier-naming.LocalVariableCase, value: lower_case }
  - { key: readability-identifier-naming.LocalVariableCase, value: camelBack }
  - { key: readability-identifier-naming.ParameterCase, value: camelBack }
  #static
  - { key: readability-identifier-naming.ClassMemberCase, value: lower_case }
  - { key: readability-identifier-naming.ClassMethodCase, value: lower_case }

  - { key: readability-identifier-naming.MethodCase, value: lower_case }
  - { key: readability-identifier-naming.PrivateMethodCase, value: lower_case }
  - { key: readability-identifier-naming.PrivateMethodSuffix, value: "_" }

  - { key: readability-identifier-naming.MemberCase, value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberCase, value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberSuffix, value: "_" }

  - { key: readability-identifier-naming.VariableCase, value: lower_case }

  - { key: readability-identifier-naming.StaticVariableCase, value: lower_case }
  - {
      key: readability-identifier-naming.ConstexprVariableCase,
      value: lower_case,
    }
  #constant
  - { key: readability-identifier-naming.GlobalConstantCase, value: lower_case }

  - { key: readability-identifier-naming.MemberConstantCase, value: lower_case }

  - { key: readability-identifier-naming.StaticConstantCase, value: lower_case }

  - {
      key: readability-identifier-naming.TemplateParameterCase,
      value: CamelCase,
    }
  # some magic number
  - {
      key: readability-magic-numbers.IgnoredIntegerValues,
      value: "-1; 0; 1; 2; 3; 4; 5;10;100",
    }
